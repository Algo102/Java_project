package Lecture.Lec4;

import java.util.LinkedList;

public class L1_LinLisAdd {
    public static void main(String[] args) {
        // Все как с ArrayList
        LinkedList<Integer> ll = new LinkedList<Integer>();

        ll.add(1);
        ll.add(2);
        ll.add(3);  
        
        System.out.println(ll); // [1, 3, 13, 123]
        
    }    
}
// LinkedList - двусвязный список. Чтоб узнать что находится в 9 элементе, нужно сначало попасть в 8, а значет нужно пройти весь список. Только ближайший элемент знает о свое соседе (т.е. хранит ссылку на следующий элемент), но в памяти они находятся не рядом друг с другом.
// AarrayList работает по индексам (по ссылкам индексов), а LinkedList работает по ссылкам и только текущий элемент знает что находится в следующем
//Если мы добавляем или удаляем элемент, то просто меняются ссылки у двух крайних элементов, которые наверняка находятся даже не рядом, в отличае от массива, которому придется двигать весь упорядочный ряд
// Если много операций по удалению и добавлению элементов, выгоднее список, при постоянном считывании, выгоднее массив.
// Виды списков.
// В односвязном, у текущего элемента, есть информация о следующем элементе.
// В двусвязном, есть информация о следующем и предидущем элементе
// В циклическом односвязном мы знаем информацию после последнего, т.е. о первом.
// В циклически двусвязном, знаем что идет после последнего и что находится перед первым. 

// addFirst() / offerFirst(): добавляет элемент в начало списка

// addLast() / offerLast(): добавляет элемент в конец списка

// removeFirst() / pollFirst(): удаляет первый элемент из начала списка

// removeLast() / pollLast(): удаляет последний элемент из конца списка

// getFirst() / peekFirst(): получает первый элемент

// getLast() / peekLast(): получает последний элемент