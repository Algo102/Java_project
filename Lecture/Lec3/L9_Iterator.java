package Lecture.Lec3;

import java.util.*;

public class L9_Iterator {
    public static void main(String[] args) {
        List<Integer> list = List.of(1, 12, 123, 1234, 12345);

        // Цикл foreach, нужен только для чтения и ИДЕТ ПО ЗНАЧЕНИЯМ в отличае от обычного for, который идет по индексам
        for (int item : list) {
            System.out.println(item);
        }
        // А ИТЕРАТОР пробегается по ссылкам на каждый элемент. В связи с этим удобны удаления, т.к. все происходит по ссылке и нет ни каких перепрыгиваний.
        // На основе нашей коллекции получаем итерируемый объект
        Iterator<Integer> col = list.iterator(); 
        System.out.println();

        // hasNext() -Пока есть следующий элемент в col
        while (col.hasNext()) {
            // Если получаем элемент, то не нужно пытаться его удалять или еще раз получать
            System.out.println(col.next());
            //col.remove();
            //col.next();
        }
    }
}
// void add(E obj): вставляет объект obj перед элементом, который должен быть возвращен следующим вызовом next()

// boolean hasNext(): возвращает true, если в коллекции имеется следующий элемент, иначе возвращает false

// boolean hasPrevious(): возвращает true, если в коллекции имеется предыдущий элемент, иначе возвращает false

// E next(): возвращает текущий элемент и переходит к следующему, если такого нет, то генерируется исключение NoSuchElementException

// E previous(): возвращает текущий элемент и переходит к предыдущему, если такого нет, то генерируется исключение NoSuchElementException

// int nextIndex(): возвращает индекс следующего элемента. Если такого нет, то возвращается размер списка

// int previousIndex(): возвращает индекс предыдущего элемента. Если такого нет, то возвращается число -1

// void remove(): удаляет текущий элемент из списка. Таким образом, этот метод должен быть вызван после методов next() или previous(), иначе будет сгенерировано исключение IlligalStateException

// void set(E obj): присваивает текущему элементу, выбранному вызовом методов next() или previous(), ссылку на объект obj